{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","utils.tsx","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","API_URL","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","onAddMovieBtn","thisMovieExist","useState","setQuery","setMovie","onLoading","setOnLoading","onError","setOnError","createNewMovie","foundMovieData","Poster","Title","Plot","imdbID","newMovieItem","loadMovie","searchQuery","a","responce","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","prevQuery","classNames","disabled","trim","onClick","movieToAdd","App","setMovies","isMovieNew","setIsMovieNew","find","existMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0192619a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\nimport { KEY } from './utils';\n\nconst API_URL = `https://www.omdbapi.com/?apikey=${KEY}`;\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","export const KEY = '8550fef4';\nexport const DEFAULT_IMG\n    = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport './FindMovie.scss';\nimport { MovieData } from '../../types/MovieData';\nimport { MovieCard } from '../MovieCard';\nimport { DEFAULT_IMG } from '../../utils';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAddMovieBtn: (newMovie: Movie) => void;\n  thisMovieExist: boolean\n};\n\nexport const FindMovie: React.FC<Props> = ({\n  onAddMovieBtn, thisMovieExist,\n}) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [onLoading, setOnLoading] = useState(false);\n  const [onError, setOnError] = useState(false);\n\n  const createNewMovie = (foundMovieData:MovieData | null) => {\n    if (foundMovieData !== null) {\n      const {\n        Poster,\n        Title,\n        Plot,\n        imdbID,\n      } = foundMovieData;\n\n      const poster = Poster === 'N/A'\n        ? DEFAULT_IMG\n        : Poster;\n\n      const newMovieItem = {\n        title: Title,\n        description: Plot,\n        imgUrl: poster,\n        imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n        imdbId: imdbID,\n      };\n\n      setMovie(newMovieItem);\n      setOnLoading(false);\n    }\n  };\n\n  const loadMovie = async (searchQuery:string) => {\n    try {\n      const responce = await getMovie(searchQuery);\n\n      if ('Error' in responce) {\n        throw new Error();\n      } else {\n        createNewMovie(responce);\n        setOnError(false);\n      }\n    } catch (error) {\n      setOnError(true);\n    } finally {\n      setOnLoading(false);\n    }\n  };\n\n  const onSubmitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setOnLoading(true);\n    loadMovie(query);\n  };\n\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (onError && query === e.target.value) {\n      setOnError(true);\n    } else {\n      setOnError(false);\n    }\n\n    setQuery((prevQuery => {\n      return prevQuery === e.target.value\n        ? query\n        : e.target.value;\n    }));\n  };\n\n  const addMovie = (movieToAdd: Movie) => {\n    if (thisMovieExist) {\n      onAddMovieBtn(movieToAdd);\n    }\n\n    setMovie(null);\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={onSubmitHandler}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={onInputChange}\n            />\n          </div>\n\n          {onError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('is-light', 'button',\n                { 'is-loading': onLoading })}\n              disabled={query.trim() === ''}\n            >\n              {!movie\n                ? 'Find a movie'\n                : 'Search again'}\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {movie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => addMovie(movie)}\n              >\n                Add to the list\n              </button>\n            )}\n          </div>\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [isMovieNew, setIsMovieNew] = useState(true);\n\n  const addMovie = (movie: Movie) => {\n    const isExistMovie = movies.find(\n      existMovie => existMovie.imdbId === movie.imdbId,\n    );\n\n    if (!isExistMovie) {\n      setIsMovieNew(true);\n      setMovies([...movies, movie]);\n    } else {\n      setIsMovieNew(false);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAddMovieBtn={addMovie} thisMovieExist={isMovieNew} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}